name: Build Pharaoh OS ISO
on:
  push:
  workflow_dispatch:

jobs:
  build-iso:
    runs-on: ubuntu-22.04
    timeout-minutes: 90

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # If your code is on a non-main branch, set it here (or remove once merged)
          # ref: codex/generate-complete-pharaoh-os-repository
          fetch-depth: 0

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gcc-multilib nasm grub-pc-bin xorriso mtools dos2unix

      - name: Detect build directory (Makefile location)
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          MF="$(git ls-files | grep -Ei '(^|/)(GNUmakefile|Makefile|makefile)$' | head -n1 || true)"
          BUILD_DIR="."
          if [ -n "${MF:-}" ]; then BUILD_DIR="$(dirname "$MF")"; fi
          echo "BUILD_DIR=$BUILD_DIR" | tee -a "$GITHUB_ENV"
          echo "Using BUILD_DIR=$BUILD_DIR"

      # -------- FIX MAKEFILE BEFORE RUNNING MAKE ----------
      - name: Normalize Makefile (CRLF → LF, fix recipe tabs)
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          MF=""
          for c in Makefile GNUmakefile makefile; do
            if [ -f "$c" ]; then MF="$c"; break; fi
          done
          [ -n "$MF" ] || { echo "No Makefile found in $PWD"; exit 1; }

          # 1) Convert CRLF to LF and strip non-breaking spaces
          dos2unix "$MF" || true
          perl -i -pe 's/\xC2\xA0/ /g' "$MF"   # NBSP → space

          # 2) Convert leading spaces on *recipe lines* to a TAB.
          # We detect we're "inside a recipe" after a target line like: name: deps...
          awk '
            BEGIN{inrecipe=0}
            /^[[:space:]]*#/ {print; next}                              # comment, passthrough
            /^[[:space:]]*$/ {print; next}                              # blank, passthrough
            /^[^[:space:]#][^:=]*:([^=]|$)/ {print; inrecipe=1; next}   # target line
            /^[^[:space:]]/ {print; inrecipe=0; next}                   # new non-indented non-target line resets
            {
              if(inrecipe && $0 ~ /^[ ]+\S/) { sub(/^[ ]+/, "\t"); }    # leading spaces → TAB
              print
            }
          ' "$MF" > "$MF.fixed" && mv "$MF.fixed" "$MF"

          echo "Preview (first 80 lines with line numbers):"
          nl -ba "$MF" | sed -n '1,80p'

      - name: List targets from detected Makefile
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          echo "== Targets in $(pwd) =="
          make -qp | awk -F':' '/^[a-zA-Z0-9][^$#\/\t=]*:([^=]|$)/ {print $1}' | sort -u | sed -n '1,200p'

      - name: Build ISO via Makefile (tries common targets)
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          set -euo pipefail
          TRY=("iso-bios" "isoimage" "iso" "image" "all")
          ok=0
          for t in "${TRY[@]}"; do
            if make -n "$t" >/dev/null 2>&1; then
              echo "Running: make $t"
              make "$t"
              ok=1; break
            fi
          done
          [ "$ok" -eq 1 ] || { echo "No known ISO target (tried: ${TRY[*]})."; exit 2; }

      - name: Locate and normalize ISOs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p out
          mapfile -t ISO_LIST < <(find "$GITHUB_WORKSPACE" -type f -name '*.iso' | sort || true)
          echo "Found ${#ISO_LIST[@]} ISO(s):"; printf ' - %s\n' "${ISO_LIST[@]}" || true
          [ "${#ISO_LIST[@]}" -ge 1 ] || { echo "No ISO files were created."; exit 3; }
          BIOS_SET=0; UEFI_SET=0
          for f in "${ISO_LIST[@]}"; do
            low="$(basename "$f" | tr '[:upper:]' '[:lower:]')"
            if [[ $low == *uefi*.iso && $UEFI_SET -eq 0 ]]; then cp -f "$f" out/PharaohOS-uefi.iso; UEFI_SET=1; fi
            if [[ $low == *bios*.iso && $BIOS_SET -eq 0 ]]; then cp -f "$f" out/PharaohOS-bios.iso; BIOS_SET=1; fi
          done
          [ $BIOS_SET -eq 0 ] && cp -f "${ISO_LIST[0]}" out/PharaohOS-bios.iso || true
          [ $UEFI_SET -eq 0 ] && [ "${#ISO_LIST[@]}" -ge 2 ] && cp -f "${ISO_LIST[1]}" out/PharaohOS-uefi.iso || true
          echo "Normalized out/:"
          ls -lh out || true

      - name: Upload BIOS ISO (if present)
        uses: actions/upload-artifact@v4
        with:
          name: PharaohOS-bios.iso
          path: out/PharaohOS-bios.iso
          if-no-files-found: warn

      - name: Upload UEFI ISO (if present)
        uses: actions/upload-artifact@v4
        with:
          name: PharaohOS-uefi.iso
          path: out/PharaohOS-uefi.iso
          if-no-files-found: warn

      - name: Upload any ISOs (catch-all)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pharaoh-os-isos
          path: ${{ github.workspace }}/**/*.iso
          if-no-files-found: warn
